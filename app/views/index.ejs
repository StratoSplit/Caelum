<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Audio Configuration</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <!-- Top Navigation Bar -->
  <nav class="navbar">
    <div class="nav-left">
      <button class="nav-btn">File</button>
      <button class="nav-btn">Tools</button>
      <button class="nav-btn">Circuits</button>
      <button class="nav-btn">Help</button>
      <button id="adminButton" class="nav-btn" onclick="toggleAdminPanel()">Admin</button>
    </div>
    <div class="nav-right">
      <button class="nav-btn blue-btn" onclick="muteAll()">Mute All</button>
      <button class="nav-btn blue-btn" onclick="cancelMute()">Cancel Mute</button>
      <button class="nav-btn clear-btn" onclick="clearConfiguration()">Clear Configuration</button>
      <a href="/profile" class="nav-btn">Settings</a>
      <a href="#" id="logout-link" class="nav-btn red-btn">Log Out</a>
    </div>
  </nav>

  <!-- Admin Panel (Initially Hidden) -->
  <div id="adminPanel" class="admin-panel" style="display: none;">
    <h2>Stream Controls</h2>

    <!-- Channel Selection -->
    <h4>Channel Selection</h4>
    <% for (let i = 1; i <= 10; i++) { %>
      <div class="channel-selection">
        <label>
          <input type="checkbox" name="channels" value="<%=i%>"> Channel <%= i %>
        </label>
      </div>
    <% } %>

    <!-- Stream Control -->
    <label for="adminAction">Stream Command:</label>
    <select id="adminAction">
      <option value="start">Start</option>
      <option value="stop">Stop</option>
    </select>

    <!-- Duration Input (Only relevant for Start) -->
    <label for="streamDuration">Duration(s):</label>
    <input type="number" id="streamDuration" value="15" min="5" max="120">

    <button onclick="sendAdminCommand()">Execute</button>

    <br><br>
    <h4>Assign Roles</h4>
    <form action="/assign-role" method="POST">
      <select name="userId">
        <% users.forEach(user => { %>
          <option value="<%= user._id %>"><%= user.username %> (<%= user.role %>)</option>
        <% }) %>
      </select>
      <select name="role">
        <option value="user">User</option>
        <option value="admin">Admin</option>
      </select>
      <button type="submit">Assign Role</button>
    </form>
    <br>

    <h4>Assign User to Team</h4>
    <form action="/assign-team" method="POST">
      <select name="userId">
        <% users.forEach(user => { %>
          <option value="<%= user._id %>"><%= user.username %></option>
        <% }) %>
      </select>
      <select name="teamId">
        <% teams.forEach(team => { %>
          <option value="<%= team._id %>"><%= team.name %></option>
        <% }) %>
      </select>
      <button type="submit">Assign Team</button>
    </form>

    <br>
    <h4>Assign Channels to Team</h4>
    <form action="/assign-numbers" method="POST">
      <select name="teamId">
        <% teams.forEach(team => { %>
          <option value="<%= team._id %>"><%= team.name %></option>
        <% }) %>
      </select>
        <% for (let i = 1; i <= 10; i++) { %>
          <label class="inline-flex items-center">
            <input type="checkbox" name="numbers" value="<%= i %>" class="form-checkbox">
            <span class="ml-2"><%= i %></span>
          </label>
        <% } %>
        <button type="submit">Assign Channels</button>
    </form>
  </div>
  


  </div>

  <!-- Main Container -->
  <div class="container">
    <!-- Master Volume Control -->
    <div class="master-speaker">
      <h3>Master Volume</h3>
      <label>Volume:</label>
      <input type="range" id="masterVolume" min="0" max="1" step="0.01" oninput="adjustMasterVolume(this.value)">
    </div>

    <!-- Channel Controls Panel -->
    <div class="channel-sliders">
      <% if (team && team.channels && team.channels.length > 0) { %>
        <% team.channels.forEach(channelIndex => { %>
          <% if (channelIndex > 0)  { %>
            <div class="channel" id="channel<%= channelIndex %>">
              <h4>Channel <%= channelIndex %></h4>
              <button class="toggle-btn off" id="toggleButton<%= channelIndex %>" onclick="toggleChannel(<%= channelIndex %>)">Off</button>
              <label>Volume:</label>
              <input type="range" class="channel-slider" id="volume<%= channelIndex %>" min="0" max="1" step="0.01" oninput="adjustVolume(<%= channelIndex - 1 %>, this.value)">
              <label>Panning:</label>
              <input type="range" class="panning-slider" id="pan<%= channelIndex %>" min="-1" max="1" step="0.01" oninput="adjustPanning(<%= channelIndex - 1 %>, this.value)">
            </div>
          <% } %>
        <% }); %>
      <% } else { %>
        <p>No channels assigned to your team.</p>
      <% } %>

    </div>

    <!-- Configuration Section -->
    <div class="config-section boxed">
      <div class="active-channels-list">
        <h3>Active Channels</h3>
        <div id="activeChannelsContainer" class="active-channels-space">
          <% for (let i = 1; i <= 10; i++) { %>
            <div id="activeChannel<%= i %>" class="active-channel" style="display: none;">
              <span>Channel <%= i %></span>
              <button class="mute-btn" onclick="toggleMuteChannel(<%= i %>)">Mute</button>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Save Configuration Section -->
      <h3>Save Configuration</h3>
      <input type="text" id="configName" class="config-input" placeholder="Configuration Name">
      <button class="save-btn styled-save-btn" onclick="saveConfiguration()">Save Configuration</button>

      <!-- Load Configuration Dropdown -->
      <h3>Load Configuration</h3>
      <select id="configurationsDropdown" class="config-select" onchange="loadConfiguration(this.value)">
        <option value="">Select a configuration...</option>
      </select>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/client.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      // Initialize configuration dropdown once
      if (typeof updateConfigurationDropdown === 'function') {
        try {
          await updateConfigurationDropdown();
          console.log('Configuration dropdown initialized from index.ejs');
          
          // Set up the dropdown change handler
          const dropdown = document.getElementById('configurationsDropdown');
          if (dropdown) {
            dropdown.addEventListener('change', function() {
              // Only attempt to load if a real option is selected
              if (this.value && this.selectedIndex > 0) {
                console.log('Loading configuration from dropdown change:', this.value);
                loadConfiguration(this.value);
              }
            });
          }
        } catch (error) {
          console.error('Error initializing dropdown:', error);
        }
      } else {
        console.error('updateConfigurationDropdown function not found');
      }
    });
  </script>
  <script type="module">
    import { register } from 'https://esm.run/@teamhanko/hanko-elements';

    const { hanko } = await register("https://23f835c0-f746-4689-99bb-0dbd777def43.hanko.io");

    document.getElementById("logout-link").addEventListener("click", async (e) => {
        e.preventDefault();
        try {
            await hanko.user.logout();
            document.location.href = "/login";
        } catch (error) {
            console.error('Logout error:', error);
        }
    });
</script>
</body>
</html>
